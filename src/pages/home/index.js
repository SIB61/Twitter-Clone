import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { getServerSession } from "next-auth";
import { useAutoAnimate } from "@formkit/auto-animate/react";
import { createOptions } from "../api/auth/[...nextauth]";
import { useEffect, useReducer, useRef, useState } from "react";
import axios from "axios";
import { dbConnect } from "@/lib/helpers/db";
import { getUserFeed } from "@/lib/services/tweet/get-tweet.server";
import { getUsers } from "@/lib/services/user/get-user.server";
import { useListState } from "@/hooks/useListState";
import { CreateTweet } from "@/components/tweet/create-tweet/CreateTweet";
import { MainLayout } from "@/components/layouts/main-layout/main-layout";
import { TweetView } from "@/components/tweet/tweet-view/TweetView";
import { YouMayKnow } from "@/components/user/you-may-know/YouMayKnow";
import useIntersectionObserver from "@/hooks/useIntersectionObserver";
import { useCustomState } from "@/hooks/useCustomState";

export async function getServerSideProps(ctx) {
  await dbConnect();
  const { user } = await getServerSession(
    ctx.req,
    ctx.res,
    createOptions(ctx.req)
  );
  const tweetsPromise = getUserFeed({
    userId: user.id,
    pageIndex: 1,
    pageSize: 10,
  });
  const usersPromise = getUsers();
  let [tweetsPage, users] = await Promise.all([tweetsPromise, usersPromise]);
  return {
    props: JSON.parse(
      JSON.stringify({
        tweetsPage: tweetsPage,
        users: users.filter((u) => u.id != user.id),
      })
    ),
  };
}

function Page({ tweetsPage, users }) {
  const tweetList = useListState(tweetsPage.data);
  const loaderRef = useRef();
  const isLoaderOnScreen = !!useIntersectionObserver(loaderRef,{})?.isIntersecting;
  const pageIndex = useCustomState(2);
  const isLastPage = useCustomState(false);
  useEffect(() => {
    if (isLoaderOnScreen && !isLastPage.value) {
      const fetchNewPost = async () => {
        try {
          const { data: response } = await axios.get(
            `/api/feed/?pageIndex=${pageIndex.value}&pageSize=${tweetsPage.pageSize}`
          );
          const newPage = response.data
          if (newPage?.data?.length === 0) {
            isLastPage.set(true);
          } else tweetList.set((state) => [...state, ...newPage?.data]);
          pageIndex.set((v) => v + 1);
        } catch (err) {}
      };
      fetchNewPost();
    }
  }, [isLoaderOnScreen]);

  const [parent, _] = useAutoAnimate();
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainLayout onNewTweet={tweetList.add}>
        <div className={styles.home}>
          <div className="center-container">
            <div className="appbar">Home</div>
            <div className="content">
              <CreateTweet
                onComplete={(tweet) => {
                  if (tweet) tweetList.add(tweet);
                }}
              />
              <div ref={parent}>
                {tweetList.value.map((tweet) => (
                  <TweetView
                    tweet={tweet}
                    key={tweet.id}
                    onDelete={tweetList.remove}
                  />
                ))}
                {isLastPage.value ? (
                  <div className="w-full center" style={{padding:'1rem',color:'var(--grey)'}}>no more tweets</div>
                ) : (
                  <div
                    className="w-full center"
                    style={{
                      fontSize: "2rem",
                      padding: "1rem",
                      color: "var(--primary-color)",
                    }}
                  >
                    <div ref={loaderRef} className="loader"></div>
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className={styles.rightBar}>
            <YouMayKnow users={users} />
          </div>
        </div>
      </MainLayout>
    </>
  );
}
export default Page;
